<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ServiceMesh on The Wondering Techie</title>
    <link>https://www.wonderingtechie.com/tags/servicemesh/</link>
    <description>Recent content in ServiceMesh on The Wondering Techie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.wonderingtechie.com/tags/servicemesh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Red Hat Openshift Service Mesh - Federation Automated Setup</title>
      <link>https://www.wonderingtechie.com/post/2022/ossm-federation-scripted/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.wonderingtechie.com/post/2022/ossm-federation-scripted/</guid>
      <description>
        
          
            Service Mesh Federation Sometimes requirements (high-availability, multi-region solutions) dictate the split a solution deployments over multiple clusters. This brings the question how should we discover and call these services from within Openshift Container Platform deployed workloads without explicit definition of the deployment location as far as the calling service is concerned. Red Hat Openshift Service Mesh (OSSM) based on Istio offers Federation of services to allow to export/import remote service as local.
          
          
        
      </description>
    </item>
    
    <item>
      <title>mTLS in the Mesh with Redhat OpenShift Service Mesh (OSSM) - On or Off?</title>
      <link>https://www.wonderingtechie.com/post/2022/ossm-mtls-on-or-off/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.wonderingtechie.com/post/2022/ossm-mtls-on-or-off/</guid>
      <description>
        
          
            Introduction One of the benefits of a service mesh is security by design, in fact it is one of the main use cases which drives adoption of the mesh in cloud based environments where there are disparate types of microservice workloads.
Although this is very powerful as one can imagine there may be cases that a workload cannot participate in mTLS handshakes using the default mesh certificates. This is due to a workload having to handle its own TLS termination or because simply it should not receive TLS traffic (performance or policy reasons).
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
